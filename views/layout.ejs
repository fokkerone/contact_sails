<!DOCTYPE html>
<html>
  <head>
    <title>New Sails App</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/importer.css">
    <link rel="stylesheet" href="/styles/landing-page.css">
    <link rel="stylesheet" href="/styles/pe-icon-7-stroke.css">
    <!--STYLES END-->
  </head>

  <body class="landing-page landing-page1">
    <nav class="navbar navbar-transparent navbar-top" role="navigation">
      <div class="container">
        <!-- Brand and toggle get grouped for better mobile display -->
        <div class="navbar-header">
          <button id="menu-toggle" type="button" class="navbar-toggle" data-toggle="collapse" data-target="#example">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar bar1"></span>
            <span class="icon-bar bar2"></span>
            <span class="icon-bar bar3"></span>
          </button>
          <a href="/">
            <div class="logo-container">
              <div class="logo">
                <img src="/img/logo.svg" alt="fokkerOne">
              </div>
            </div>
          </a>
        </div>
        <!-- Collect the nav links, forms, and other content for toggling -->
        <div class="collapse navbar-collapse" id="example" >
          <ul class="nav navbar-nav navbar-right">
            <li>
              <a href="#">
                <i class="fa fa-facebook-square"></i>
                Like
              </a>
            </li>
            <li>
              <a href="#">
                <i class="fa fa-twitter"></i>
                Tweet
              </a>
            </li>
            <li>
              <a href="#">
                <i class="fa fa-pinterest"></i>
                Pin
              </a>
            </li>
          </ul>
        </div>
        <!-- /.navbar-collapse -->
      </div>
    </nav>

    <div class="wrapper">
      <div class="parallax filter-gradient blue" data-color="blue">
        <div class="parallax-background">
          <img class="parallax-background-image" src="/img/bkgd_seaweed.png">
        </div>
        <div class= "container">
          <div class="row">
            <div class="col-md-5 hidden-xs">
              <div class="parallax-image">
                <img class="" src="/img/kraken.svg" style="margin-top: 20px"/>
              </div>
            </div>
            <div class="col-md-6 col-md-offset-1">
              <div class="description">
                <h2>Awesome landing page.</h2>
                <br>
                <h5>Be amazed by the best looking bootstrap landing page on the web! Your new app deserves an amazing page to show all of its features. Clear visual, light colours and beautifully aligned elements - they all try to make the users aware of your great app features!</h5>
              </div>
              <div class="buttons">
                <button class="btn btn-fill btn-neutral">
                  <i class="fa fa-apple"></i> Appstore
                </button>
                <button class="btn btn-simple btn-neutral">
                  <i class="fa fa-android"></i>
                </button>
                <button class="btn btn-simple btn-neutral">
                  <i class="fa fa-windows"></i>
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    <%- body %>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->


    <script src="/components/jquery/dist/jquery.js"></script>
    <script src="/components/bootstrap/dist/js/bootstrap.js"></script>
    <script src="/js/awesome-landing-page.js"></script>

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/awesome-landing-page.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
